-- Basic Inventory Management System Database Schema

-- Stock movement type enumeration  
DO $$ BEGIN
    CREATE TYPE stock_movement_type AS ENUM (
        'PURCHASE', 'SALE', 'TRANSFER', 'ADJUSTMENT', 'RETURN', 'DAMAGED', 
        'EXPIRED', 'STOLEN', 'FOUND', 'INITIAL_STOCK', 'PHYSICAL_COUNT'
    );
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Reorder status enumeration
DO $$ BEGIN
    CREATE TYPE reorder_status AS ENUM ('PENDING', 'ORDERED', 'RECEIVED', 'CANCELLED');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Alert severity enumeration
DO $$ BEGIN
    CREATE TYPE alert_severity AS ENUM ('LOW', 'MEDIUM', 'HIGH', 'CRITICAL');
EXCEPTION
    WHEN duplicate_object THEN null;
END $$;

-- Warehouse/Location tracking
CREATE TABLE IF NOT EXISTS "Warehouse" (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    code varchar(20) UNIQUE NOT NULL,
    name varchar(255) NOT NULL,
    description text,
    "isMainWarehouse" boolean DEFAULT false,
    "isActive" boolean DEFAULT true,
    
    -- Location details
    address text,
    city varchar(100),
    state varchar(50),
    "zipCode" varchar(20),
    country varchar(50) DEFAULT 'US',
    
    -- Contact information
    "managerName" varchar(255),
    "managerPhone" varchar(20),
    "managerEmail" varchar(255),
    
    "createdAt" timestamp NOT NULL DEFAULT NOW(),
    "updatedAt" timestamp NOT NULL DEFAULT NOW()
);

-- Enhanced inventory levels per warehouse
CREATE TABLE IF NOT EXISTS "InventoryLevel" (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    "materialId" text NOT NULL REFERENCES "Material"(id) ON DELETE CASCADE,
    "warehouseId" uuid NOT NULL REFERENCES "Warehouse"(id) ON DELETE CASCADE,
    
    -- Stock levels
    "currentStock" decimal(15, 4) NOT NULL DEFAULT 0,
    "reservedStock" decimal(15, 4) NOT NULL DEFAULT 0,
    "availableStock" decimal(15, 4) GENERATED ALWAYS AS ("currentStock" - "reservedStock") STORED,
    
    -- Reorder settings
    "reorderPoint" integer DEFAULT 10,
    "reorderQuantity" integer DEFAULT 50,
    "maxStockLevel" integer,
    
    -- Location within warehouse
    "binLocation" varchar(50),
    "zone" varchar(50),
    
    -- Cost tracking
    "averageCost" decimal(15, 4),
    "lastPurchaseCost" decimal(15, 4),
    "totalValue" decimal(15, 2) GENERATED ALWAYS AS ("currentStock" * COALESCE("averageCost", 0)) STORED,
    
    -- Stock tracking
    "lastStockCount" timestamp,
    "lastStockMovement" timestamp,
    
    "createdAt" timestamp NOT NULL DEFAULT NOW(),
    "updatedAt" timestamp NOT NULL DEFAULT NOW(),
    
    UNIQUE("materialId", "warehouseId")
);

-- Stock movement history
CREATE TABLE IF NOT EXISTS "StockMovement" (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    "materialId" text NOT NULL REFERENCES "Material"(id) ON DELETE CASCADE,
    "warehouseId" uuid NOT NULL REFERENCES "Warehouse"(id) ON DELETE CASCADE,
    
    -- Movement details
    "movementType" stock_movement_type NOT NULL,
    quantity decimal(15, 4) NOT NULL,
    "previousStock" decimal(15, 4) NOT NULL,
    "newStock" decimal(15, 4) NOT NULL,
    
    -- Cost information
    "unitCost" decimal(15, 4),
    "totalCost" decimal(15, 2),
    
    -- Reference information
    "referenceType" varchar(50),
    "referenceId" text,
    "documentNumber" varchar(100),
    
    -- Context
    reason text,
    notes text,
    "performedBy" text,
    
    "createdAt" timestamp NOT NULL DEFAULT NOW()
);

-- Reorder requests
CREATE TABLE IF NOT EXISTS "ReorderRequest" (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    "materialId" text NOT NULL REFERENCES "Material"(id) ON DELETE CASCADE,
    "warehouseId" uuid NOT NULL REFERENCES "Warehouse"(id) ON DELETE CASCADE,
    
    -- Request details
    "requestedQuantity" integer NOT NULL,
    "currentStock" decimal(15, 4) NOT NULL,
    "reorderPoint" integer NOT NULL,
    "urgencyLevel" alert_severity NOT NULL DEFAULT 'MEDIUM',
    
    -- Status tracking
    status reorder_status NOT NULL DEFAULT 'PENDING',
    "statusNotes" text,
    
    -- Automation details
    "isAutoGenerated" boolean DEFAULT true,
    "generatedAt" timestamp DEFAULT NOW(),
    "reviewedBy" text,
    "reviewedAt" timestamp,
    
    "createdAt" timestamp NOT NULL DEFAULT NOW(),
    "updatedAt" timestamp NOT NULL DEFAULT NOW()
);

-- Stock alerts
CREATE TABLE IF NOT EXISTS "StockAlert" (
    id uuid PRIMARY KEY DEFAULT gen_random_uuid(),
    "materialId" text NOT NULL REFERENCES "Material"(id) ON DELETE CASCADE,
    "warehouseId" uuid NOT NULL REFERENCES "Warehouse"(id) ON DELETE CASCADE,
    
    -- Alert details
    "alertType" varchar(50) NOT NULL,
    severity alert_severity NOT NULL,
    title varchar(255) NOT NULL,
    message text NOT NULL,
    
    -- Alert context
    "currentStock" decimal(15, 4),
    "thresholdValue" decimal(15, 4),
    "recommendedAction" text,
    
    -- Status
    "isActive" boolean DEFAULT true,
    "isResolved" boolean DEFAULT false,
    "resolvedBy" text,
    "resolvedAt" timestamp,
    "resolutionNotes" text,
    
    "createdAt" timestamp NOT NULL DEFAULT NOW(),
    "updatedAt" timestamp NOT NULL DEFAULT NOW()
);

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_inventory_level_material ON "InventoryLevel"("materialId");
CREATE INDEX IF NOT EXISTS idx_inventory_level_warehouse ON "InventoryLevel"("warehouseId");
CREATE INDEX IF NOT EXISTS idx_inventory_level_low_stock ON "InventoryLevel"("availableStock") WHERE "availableStock" <= "reorderPoint";

CREATE INDEX IF NOT EXISTS idx_stock_movement_material ON "StockMovement"("materialId");
CREATE INDEX IF NOT EXISTS idx_stock_movement_warehouse ON "StockMovement"("warehouseId");
CREATE INDEX IF NOT EXISTS idx_stock_movement_date ON "StockMovement"("createdAt");

CREATE INDEX IF NOT EXISTS idx_reorder_request_status ON "ReorderRequest"(status);
CREATE INDEX IF NOT EXISTS idx_stock_alert_active ON "StockAlert"("isActive", "isResolved");

-- Create main warehouse if it doesn't exist
INSERT INTO "Warehouse" (code, name, "isMainWarehouse", "isActive")
SELECT 'MAIN', 'Main Warehouse', true, true
WHERE NOT EXISTS (SELECT 1 FROM "Warehouse" WHERE code = 'MAIN');