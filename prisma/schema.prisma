// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  OFFICE
  FIELD_CREW
}

enum JobStatus {
  ESTIMATE
  SCHEDULED
  DISPATCHED
  IN_PROGRESS
  COMPLETED
  BILLED
  CANCELLED
}

enum JobType {
  SERVICE_CALL
  COMMERCIAL_PROJECT
}

enum JobPhaseName {
  UG // Underground
  RI // Rough-In
  FN // Finish
}

enum PhaseStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum ChangeOrderStatus {
  PENDING
  APPROVED
  REJECTED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum LeadStatus {
  COLD_LEAD
  WARM_LEAD
  ESTIMATE_REQUESTED
  ESTIMATE_SENT
  ESTIMATE_APPROVED
  JOB_SCHEDULED
  JOB_IN_PROGRESS
  JOB_COMPLETED
  INVOICED
  PAID
  LOST
  FOLLOW_UP_REQUIRED
}

enum LeadSource {
  WEBSITE
  REFERRAL
  GOOGLE_ADS
  FACEBOOK
  YELLOW_PAGES
  WORD_OF_MOUTH
  REPEAT_CUSTOMER
  OTHER
}

model User {
  id               String           @id @default(cuid())
  email            String           @unique
  name             String
  password         String
  role             UserRole
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  timeEntries      TimeEntry[]
  assignedJobs     JobAssignment[]
  changeOrders     ChangeOrder[]
  purchaseOrders   PurchaseOrder[]
  assignedLeads    Lead[]
  leadActivities   LeadActivity[]
  leadEstimates    LeadEstimate[]
}

model Customer {
  id               String           @id @default(cuid())
  companyName      String?
  firstName        String
  lastName         String
  email            String?
  phone            String?
  street           String?
  address          String?
  city             String?
  state            String?
  zip              String?
  quickbooksId     String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  jobs             Job[]
  invoices         Invoice[]
  lead             Lead?            // One-to-one relationship with Lead
}

model Lead {
  id               String           @id @default(cuid())
  firstName        String
  lastName         String
  companyName      String?
  email            String?
  phone            String?
  street           String?
  city             String?
  state            String?
  zip              String?
  status           LeadStatus       @default(COLD_LEAD)
  source           LeadSource?
  estimatedValue   Float?
  priority         String?          // HIGH, MEDIUM, LOW
  description      String?          // What work they need
  notes            String?
  lastContactDate  DateTime?
  nextFollowUpDate DateTime?
  assignedTo       String?          // User ID
  convertedToCustomerId String?      @unique // When converted to customer
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  assignedUser     User?            @relation(fields: [assignedTo], references: [id])
  convertedCustomer Customer?       @relation(fields: [convertedToCustomerId], references: [id])
  activities       LeadActivity[]
  estimates        LeadEstimate[]
}

model LeadActivity {
  id               String           @id @default(cuid())
  leadId           String
  type             String           // CALL, EMAIL, MEETING, NOTE, STATUS_CHANGE
  description      String
  outcome          String?          // SUCCESS, NO_ANSWER, CALLBACK_REQUESTED, etc.
  scheduledDate    DateTime?        // For scheduled activities
  completedDate    DateTime?        // When activity was completed
  createdBy        String
  createdAt        DateTime         @default(now())
  
  // Relations
  lead             Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  user             User             @relation(fields: [createdBy], references: [id])
}

model LeadEstimate {
  id               String           @id @default(cuid())
  leadId           String
  title            String
  description      String?
  estimatedHours   Float?
  laborCost        Float?
  materialCost     Float?
  totalAmount      Float
  validUntil       DateTime?
  status           String           @default("DRAFT") // DRAFT, SENT, APPROVED, REJECTED, EXPIRED
  sentDate         DateTime?
  respondedDate    DateTime?
  notes            String?
  createdBy        String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  lead             Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)
  creator          User             @relation(fields: [createdBy], references: [id])
}

model Job {
  id               String           @id @default(cuid())
  jobNumber        String           @unique // Format: YY-###-SSS
  customerId       String
  type             JobType
  status           JobStatus        @default(ESTIMATE)
  description      String
  address          String?
  city             String?
  state            String?
  zip              String?
  scheduledDate    DateTime?
  scheduledTime    String?          // Time as string (e.g., "9:00 AM")
  startDate        DateTime?
  completedDate    DateTime?
  completedAt      DateTime?
  billedDate       DateTime?
  estimatedHours   Float?
  actualHours      Float?
  estimatedCost    Float?
  actualCost       Float?
  billedAmount     Float?
  priority         String?          // HIGH, MEDIUM, LOW
  jobType          String?          // Additional job type description
  assignedCrewId   String?
  quickbooksJobId  String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  customer         Customer         @relation(fields: [customerId], references: [id])
  assignedCrew     Crew?            @relation(fields: [assignedCrewId], references: [id])
  phases           JobPhaseDetail[]
  jobPhases        JobPhase[]
  timeEntries      TimeEntry[]
  materialUsage    MaterialUsage[]
  assignments      JobAssignment[]
  changeOrders     ChangeOrder[]
  purchaseOrders   PurchaseOrder[]
  notes            JobNote[]
  invoices         Invoice[]
}

model JobPhase {
  id               String           @id @default(cuid())
  jobId            String
  name             JobPhaseName
  description      String?
  estimatedHours   Float?
  actualHours      Float?
  estimatedCost    Float?
  actualCost       Float?
  status           PhaseStatus      @default(NOT_STARTED)
  startDate        DateTime?
  completedDate    DateTime?
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  job              Job              @relation(fields: [jobId], references: [id], onDelete: Cascade)
  
  @@unique([jobId, name])
}

model JobPhaseDetail {
  id               String           @id @default(cuid())
  jobId            String
  phase            JobPhaseName
  jobNumber        String           @unique // Format: YY-###-SSS-PH
  status           JobStatus        @default(SCHEDULED)
  estimatedHours   Float?
  actualHours      Float?
  estimatedCost    Float?
  actualCost       Float?
  startDate        DateTime?
  completedDate    DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  job              Job              @relation(fields: [jobId], references: [id])
  timeEntries      TimeEntry[]
  materialUsage    MaterialUsage[]
  purchaseOrders   PurchaseOrder[]
}

model TimeEntry {
  id               String           @id @default(cuid())
  userId           String
  jobId            String
  phaseId          String?
  date             DateTime
  startTime        DateTime
  endTime          DateTime?
  hours            Float
  description      String?
  gpsLatitude      Float?
  gpsLongitude     Float?
  synced           Boolean          @default(false)
  quickbooksId     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  user             User             @relation(fields: [userId], references: [id])
  job              Job              @relation(fields: [jobId], references: [id])
  phase            JobPhaseDetail?  @relation(fields: [phaseId], references: [id])
}

model Material {
  id               String           @id @default(cuid())
  code             String           @unique
  name             String
  description      String?
  unit             String
  cost             Float
  price            Float
  markup           Float            @default(1.5)
  category         String
  vendorId         String?
  inStock          Int              @default(0)
  minStock         Int              @default(0)
  location         String?
  quickbooksItemId String?          @unique
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  vendor           Vendor?          @relation(fields: [vendorId], references: [id])
  usage            MaterialUsage[]
  purchaseOrderItems PurchaseOrderItem[]
  invoiceLineItems InvoiceLineItem[]
}

model MaterialUsage {
  id               String           @id @default(cuid())
  jobId            String
  phaseId          String?
  materialId       String
  quantity         Float
  unitCost         Float
  totalCost        Float
  usedBy           String
  usedAt           DateTime
  synced           Boolean          @default(false)
  createdAt        DateTime         @default(now())
  
  // Relations
  job              Job              @relation(fields: [jobId], references: [id])
  phase            JobPhaseDetail?  @relation(fields: [phaseId], references: [id])
  material         Material         @relation(fields: [materialId], references: [id])
}

model Crew {
  id               String           @id @default(cuid())
  name             String           @unique
  description      String?
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  members          CrewMember[]
  assignedJobs     Job[]
}

model CrewMember {
  id               String           @id @default(cuid())
  crewId           String
  name             String
  role             String?          // Lead, Apprentice, etc.
  hourlyRate       Float?
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  crew             Crew             @relation(fields: [crewId], references: [id], onDelete: Cascade)
}

model Vendor {
  id               String           @id @default(cuid())
  code             String           @unique
  name             String
  contactName      String?
  email            String?
  phone            String?
  address          String?
  quickbooksId     String?          @unique
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  materials        Material[]
  purchaseOrders   PurchaseOrder[]
}

model PurchaseOrder {
  id               String           @id @default(cuid())
  poNumber         String           @unique // Format: Job-Phase-VendorCode-##
  jobId            String
  phaseId          String?
  vendorId         String
  createdBy        String
  status           String           @default("PENDING")
  totalAmount      Float
  approvedBy       String?
  approvedAt       DateTime?
  quickbooksId     String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  job              Job              @relation(fields: [jobId], references: [id])
  phase            JobPhaseDetail?  @relation(fields: [phaseId], references: [id])
  vendor           Vendor           @relation(fields: [vendorId], references: [id])
  creator          User             @relation(fields: [createdBy], references: [id])
  items            PurchaseOrderItem[]
}

model PurchaseOrderItem {
  id               String           @id @default(cuid())
  purchaseOrderId  String
  materialId       String
  quantity         Float
  unitCost         Float
  totalCost        Float
  
  // Relations
  purchaseOrder    PurchaseOrder    @relation(fields: [purchaseOrderId], references: [id])
  material         Material         @relation(fields: [materialId], references: [id])
}

model JobAssignment {
  id               String           @id @default(cuid())
  jobId            String
  userId           String
  assignedAt       DateTime         @default(now())
  assignedBy       String
  
  // Relations
  job              Job              @relation(fields: [jobId], references: [id])
  user             User             @relation(fields: [userId], references: [id])
  
  @@unique([jobId, userId])
}

model ChangeOrder {
  id               String           @id @default(cuid())
  jobId            String
  requestedBy      String
  description      String
  estimatedCost    Float
  actualCost       Float?
  status           ChangeOrderStatus @default(PENDING)
  approvedBy       String?
  approvedAt       DateTime?
  customerApproved Boolean          @default(false)
  photos           String[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  job              Job              @relation(fields: [jobId], references: [id])
  requester        User             @relation(fields: [requestedBy], references: [id])
}

model JobNote {
  id               String           @id @default(cuid())
  jobId            String
  note             String
  createdBy        String
  createdAt        DateTime         @default(now())
  
  // Relations
  job              Job              @relation(fields: [jobId], references: [id])
}

model LaborRate {
  id               String           @id @default(cuid())
  name             String
  description      String?
  hourlyRate       Float
  skillLevel       String
  active           Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  invoiceLineItems InvoiceLineItem[]
}

model Invoice {
  id               String           @id @default(cuid())
  invoiceNumber    String           @unique // Format: INV-YYYY-###
  jobId            String
  customerId       String
  status           InvoiceStatus    @default(DRAFT)
  totalAmount      Float
  taxAmount        Float            @default(0)
  subtotalAmount   Float
  dueDate          DateTime
  sentDate         DateTime?
  paidDate         DateTime?
  notes            String?
  quickbooksId     String?          @unique
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  
  // Relations
  job              Job              @relation(fields: [jobId], references: [id])
  customer         Customer         @relation(fields: [customerId], references: [id])
  lineItems        InvoiceLineItem[]
}

model InvoiceLineItem {
  id               String           @id @default(cuid())
  invoiceId        String
  type             String           // 'LABOR', 'MATERIAL', 'OTHER'
  description      String
  quantity         Float
  unitPrice        Float
  totalPrice       Float
  materialId       String?
  laborRateId      String?
  
  // Relations
  invoice          Invoice          @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  material         Material?        @relation(fields: [materialId], references: [id])
  laborRate        LaborRate?       @relation(fields: [laborRateId], references: [id])
}